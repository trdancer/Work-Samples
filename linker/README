Troy Kelley
New York University
Operating Systems 
Yan Shvartshnaider
Two Pass Linker - Lab 1


##About:
You are to implement a two-pass linker in C, C++, or Java.
The target machine is word addressable and has a memory of 300 words, each consisting of 4 decimal digits. The first
(leftmost) digit is the opcode, which is unchanged by the linker. The remaining three digits (called the address field) form
either
-- An immediate operand, which is unchanged.
-- An absolute address, which is unchanged.
-- A relative address, which is relocated.
-- An external address, which is resolved.
Relocating relative addresses and resolving external references were discussed in class and are in the notes. The input
consists of a series of object modules, each of which contains three parts: definition list, use list, and program text.
The linker processes the input twice (that is why it is called two-pass). Pass one determines the base address for each
module and the absolute address for each external symbol, storing the later in the symbol table it produces. The first
module has base address zero; the base address for module I + 1 is equal to the base address of module I plus the length
of module I. The absolute address for a symbol S defined in module M is the base address of M plus the relative address
of S within M. Pass two uses the base addresses and the symbol table computed in pass one to generate the actual output
by relocating relative addresses and resolving external references.
The definition list is a count ND followed by ND pairs (S;R) where S is the symbol being defined and R is the relative
address to which the symbol refers. Pass one relocates R forming the absolute address A and stores the pair (S;A) in the
symbol table.

The use list is a count NU followed by the NU "pairs". The first entry in the pair is an external symbol used in the
module. The second entry is a list of relative addresses in the module in which the symbol is used. The list is terminated
by a sentinel of -1. For example, a use list of "2 f 3 1 4 -1 xyg 0 -1" signifies that the symbol f is used in instructions 1, 3,
and 4, and the symbol xyg is used in instruction 0.

The program text consists of a count NT followed by NT 5-digit numbers. NT is the length of the module. The left four
digits of each number form the instruction as described above. The last (rightmost) digit specifies the address type: 1
signifies "immediate", 2 "absolute", 3 "relative", and 4 "external".

Your program must check the input for the errors listed below. All error messages produced must be informative, e.g.,
"Error: The symbol 'diagonal' was used but not defined. It has been given the value 111".
-- If a symbol is multiply defined, print an error message and use the value given in the last definition.
-- If a symbol is used but not defined, print an error message and use the value 111.
-- If a symbol is defined but not used, print a warning message and continue.
-- If an absolute address exceeds the size of the machine, print an error message and use the largest legal value.
-- If multiple symbols are listed as used in the same instruction, print an error message and ignore all but the last usage
given.
-- If an address appearing in a definition exceeds the size of the module, print an error message and treat the address
given as the last word in the module.

##To test:
Ensure your wokring directory contains TwoPassLinker.java and all test input files.
Compiling:
Run: javac TwoPassLinker.java

##Running/testing:
Run: java TwoPassLinker < path-to-input-file

##Notes:
This implementation has no arbitrary limits for any type of data, ex. number of symbols, number of mods, length of symbols, etc.
Java hashmaps and arraylists are used to store an arbitrary number of symbols, instructions, and definitions.

All input is performed through one function, getInput() so as not to create a massive nubmer of Scanner objects. This function also ignores any input that is just whitespace.

The symbol table output may or may not be sorted by actual definition location, because the symbols are stored in a hashmap. In order to reduce this effect, I used a LinkedHashMap, but that will only maintain the order in which they were defined, not actual sort by values.
For example if in a module we have: 2 x 4 y 2
The symbol table will produce:

Symbol Table:
x:	4
y:	2

So it maintains order between each module but does not sort the values themselves.

The same goes with the output for errors when a symbol is never used, for the same reason.

This functionality does not effect the accuracy of the programs results such as when symbols are defined in the absolute address space.

I also used slightly different wording for errors than the examples given to us.