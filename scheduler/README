Troy Kelley
New York University
Operating Systems
Yan Shvartshnaider
Lab 2 - Scheduling
##About
In this lab you will simulate scheduling in order to see how the time required depends on the scheduling
algorithm and the request patterns.

A process is characterized by just four non-negative integers A, B, C, and M. A is the arrival time of the
process and C is the total CPU time needed. A process execution consists of computation alternating with
I/O. I refer to these as CPU bursts and I/O bursts.

To calculate CPU burst times we make the simplifying assumption that, for each process, the CPU burst
times are uniformly distributed random integers (or UDRIs for short) in the interval (0;B]. To obtain a
UDRI t in some interval (0;U] use the function randomOS(U) described below. So the next CPU burst is
randomOS(B). If the value returned by randomOS(B), is larger than the total CPU time remaining, set the
next CPU burst to the remaining time.

The I/O burst time for a process is its preceding CPU burst time multiplied by M.
You are to read a file describing n processes (i.e., n quadruples of numbers) and then simulate the n processes
until they all terminate. The way to do this is to keep track of the state of each process (e.g., ready, running,
blocked) and advance time, making any state transitions needed. At the end of the run you first print an
identification of the run including the scheduling algorithm used, any parameters (e.g. the quantum for RR),
and the number of processes simulated.
You then print for each process
-- A, B, C, and M
-- Finishing time.
-- Turnaround time (i.e., finishing time - A).
-- I/O time (i.e., time in Blocked state).
-- Waiting time (i.e., time in Ready state).
You then print the following summary data.
-- Finishing time (i.e., when all the processes have finished).
-- CPU Utilization (i.e., percentage of time some job is running).
-- I/O Utilization (i.e., percentage of time some job is blocked).
-- Throughput, expressed in processes completed per hundred time units.
-- Average turnaround time.
-- Average waiting time.
You must simulate each of the following scheduling algorithms, assuming, for simplicity, that a context switch
takes zero time. You need only do calculations every time unit (e.g., you may assume nothing happens at
time 2.5).
-- FCFS
-- RR with quantum 2.
-- LCFS (Last come first served. Yes, this is weird.)
-- HPRN. Define the denominator to be max(1, running time), to prevent dividing by zero for a job that
has yet to be run. Remember that HPRN is non-preemptive.
For each scheduling algorithm there are several runs with diferent process mixes. A mix is a value of n
followed by n A;B;C;M quadruples.

The simple function randomOS(U), which you are to write, reads a random non-negative integer X from a file
named random-numbers (in the current directory) and returns the value 1+(X mod U). I will supply a file
with a large number of random non-negative integers. The purpose of standardizing the random numbers is
so that all correct programs will produce the same answers.

##Compiling
navigate to scheduler/src/
run: javac SchedulerMain.java

##Running
run: java SchedulerMain <verbosity-option> <file-name>

##Notes
Input is format agnostic, meaning it will basically read any file that is follows the spec, no matter how many white space characters there are and extraneous words there are in it. The parser I have written ignores everything but numbers.
To read from and write to files I use the BufferedReader/Writer for which I used the recommended constructor on the Java API page for the repsective classes. 
I used a nested file structure to make the IO cleaner and easier to navigate.
File structure:
	src/															out/
	contains source files such as .java & .class					contains the output files from running the program
	The main program to run is "SchedulerMain.java"
		in/
		contains input files

The output from this run will be created in the ..out/ directory with the names <scheduling_algo>-output-<input_number>
If the input file is not named in the format <name>-<number>, the resulting output file name will be <scheduling_algo>-output-<file_name>

In the event that a file contains NO processes, the output file will simply read "No processes to run" with no statistics, etc.





