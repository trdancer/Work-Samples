Troy Kelley
New York University
Operating Systems
Yan Shvartzshnaider
Lab 4: Paging

About:
This lab simulates demand paging. It will allow you to see how the number of page faults depends on page
size, program size, replacement algorithm, and job mix (job mix is defined below and includes locality and
multiprogramming level).
The idea is to have a driver generate memory references and then have a demand paging simulator (called
pager below) decide if each reference causes a page fault. Assume all memory references are for entities of
one fixed size, i.e., model a word oriented machine, containing M words. Although in a real OS memory is
needed for page tables, OS code, etc., you should assume all M words are available for page frames.
The program is invoked with 6 command line arguments, 5 positive integers and one string
-- M, the machine size in words.
-- P, the page size in words.
-- S, the size of each process, i.e., the references are to virtual addresses 0..S-1.
-- J, the \job mix", which determines A, B, and C, as described below.
-- N, the number of references for each process.
-- R, the replacement algorithm, FIFO, RANDOM, or LRU.
The driver reads all input, simulates N memory references per program, and produces all output. The driver
uses round robin scheduling with quantum q=3 (i.e., 3 references for process 1, then 3 for process 2, etc.).
The driver models locality by ensuring that a fraction A of the references are to the address one higher
than the current (representing a sequential memory reference), a fraction B are to a nearby lower address
(representing a backward branch), a fraction C are to a nearby higher address (representing a jump around
a \then" or \else" block), and the remaining fraction (1-A-B-C) are to random addresses. Specifically, if
the current word referenced by a process is w, then the next reference by this process is to the word with
address
-- w+1 mod S with probability A
-- mod S with probability B
-- w+4 mod S with probability C
-- a random value in 0..S-1 each with probability (1-A-B-C)/S
Since there are S possible references in case 4 each with probability (1-A-B-C)/S, the total probability of
case 4 is 1-A-B-C, and the total probability for all four cases is A+B+C+(1-A-B-C) =1 as required.
There are four possible sets of processes (i.e., values for J)
J=1: One process with A=1 and B=C=0, the simplest (fully sequential) case.
J=2: Four processes, each with A=1 and B=C=0.
J=3: Four processes, each with A=B=C=0 (fully random references).
J=4: Four Processes. The first process has A=.75, B=.25 and C=0;
the second process has A=.75, B=0, and C=.25;
the third process has A=.75, B=.125 and C=.125;
and the fourth process has A=.5, B=.125 and C=.125.
The system begins with all frames empty, i.e. no pages loaded. So the first reference for each process will
definitely be a page fault. If a run has D processes (J=1 has D=1, the others have D=4), then process k
(1<=k<=D) begins by referencing word 111*k mod S.

Sample inputs:
10 10 20 1 10 lru 0
10 10 10 1 100 lru 0
10 10 10 2 10 lru 0
20 10 10 2 10 lru 0
20 10 10 2 10 random 0
20 10 10 2 10 fifo 0
20 10 10 3 10 lru 0
20 10 10 3 10 fifo 0
20 10 10 4 10 lru 0
20 10 10 4 10 random 0
90 10 40 4 100 lru 0
40 10 90 1 100 lru 0
40 10 90 1 100 fifo 0
800 40 400 4 5000 lru 0
10 5 30 4 3 random 0
1000 40 400 4 5000 fifo 0

Compiling:
navigate to directory of PagingMain.java, ensure that PagingMain.java, Process.java, and Page.java are in the same directory and not in sub-directories.
run javac PagingMain.java

Running/Testing:
Before running the program, ensure that the file 'random-numbers' is also in the same directory as the PagingMain.class file.
run java PagingMain M P S J N R
with M, P, S, J, N, and R being the 6 command line arguments as specified in the instructions.
Results will be printed to the terminal.

Notes:
This program assumes that the number J is a valid option from 1-4, if that is not given than an error will raise later that there are no processes intialized in the processes list.
Other natural limitations exist such as if wrong string is given as the replacement algorithm, or non-numeric characters are given in the other 5 fields.
It will also terminate immediately if the number of commandline args is not 6.
There is no option for debugging, however there are commented out print statements that could serve that function if uncommented.
In the final output when a process has had 0 evictions, the example output had two seperate formats, so I simply chose to print "the average residency is undefined", and likewise with the overall average residency time.
In order to boost performance, the search for a free frame and the calculation of the page to be evicted occurs in the same loop, and if the loop is not broken than the page in the calculated frame-number is hence evicted.
There are no limitations in the running of this program and should work for all inputs within the specification. 
